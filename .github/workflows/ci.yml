name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read

env:
  ENV_FILE: .env.test
  APP_ENV: test
  APP_DEBUG: true
  MONGODB_URL: mongodb://mongodb:27017/cqrs_test
  MONGODB_DB: cqrs_test
  BACKUP_PATH: data/backup
  BACKUP_FILE_NAME: mongodb.tar.gz

jobs:
  symfony:
    name: Symfony cqrs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Build the docker images
#        run: make build-test

      - name: Start the docker images
        run: make start-test

      - name: Check running cont
        run: docker ps -a

#      - name: Copy .env.test to .env
#        run: cp .env.test .env
#
#      - name: Debug Environment Variables
#        run: printenv
#
#      - name: Cache Composer packages
#        uses: actions/cache@v2
#        with:
#          path: vendor
#          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
#
#      - name: Install dependencies
#        run: |
#          composer install --prefer-dist --no-progress --no-interaction --prefer-dist
#
#      - name: Wait for services
#        run: |
#          docker run --rm \
#            -v /var/run/docker.sock:/var/run/docker.sock \
#            jwilder/dockerize \
#            -wait tcp://nginx-php-8.2:80 -timeout 30s
#
#      - name: Debug Nginx error log
#        run: |
#          docker exec nginx-php-8.2 sh -c 'cat /var/log/nginx/error.log'
#
#      - name: Generate and load fixtures
#        run: |
#          php bin/console m:f:l --env=test --no-interaction
#
#      - name: Backup database
#        run: |
#          mkdir -p ${{ github.workspace }}/${{ env.BACKUP_PATH }}
#          mongodump --uri "${{ env.MONGODB_URL }}" --gzip --archive=${{ github.workspace }}/${{ env.BACKUP_PATH }}/${{ env.BACKUP_FILE_NAME }} --db=${MONGODB_DB}

#      - name: Upload backup as artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: database-backup
#          path: ${{ github.workspace }}/${{ env.BACKUP_PATH }}/${{ env.BACKUP_FILE_NAME }}
#
#      - name: Download backup artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: database-backup
#          path: ${{ env.BACKUP_PATH }}
#
#      - name: Ls dir
#        run: ls -al ${{ github.workspace }}/${{ env.BACKUP_PATH }}
#
#      - name: Run tests
#        run: php vendor/bin/phpunit --configuration phpunit.xml.dist


#      - name: Set up Docker
#        uses: docker/setup-buildx-action@v1
#
#      - name: Build Docker image
#        run: docker build --cache-from myapp:latest --tag myapp:latest .
#
#      - name: Generate SSL Key for JWT
#        run: php bin/console lexik:jwt:generate-keypair
#
#      - name: Migrate database
#        run: php bin/console d:m:m --no-interaction --env=test
#
#      - name: Loading fixtures
#        run: php bin/console d:f:l --no-interaction --env=test
#      - name: Run PHPStan
#        run: vendor/bin/phpstan analyze
#
#      - name: Run PHPCS
#        run: vendor/bin/phpcs --standard=PSR12 src/
#
#      - name: Generate Code Coverage
#        run: vendor/bin/phpunit --coverage-clover=coverage.xml
#
#      - name: Upload Code Coverage
#        uses: actions/upload-artifact@v2
#        with:
#          name: code-coverage
#          path: coverage.xml
