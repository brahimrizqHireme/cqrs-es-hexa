name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read

env:
  ENV_FILE: .env.test
  APP_ENV: test
  MONGODB_URL: mongodb://localhost:27017/cqrs_test
  MONGODB_DB: cqrs_test
  BACKUP_PATH: data/backup
  BACKUP_FILE_NAME: mongodb.tar.gz

jobs:
  symfony:
    name: Symfony cqrs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.2]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mongodb

      - name: Copy .env to .env.test
        run: cp .env.test .env

      - name: Debug Environment Variables
        run: printenv

      - name: Cache Composer packages
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress --no-interaction --prefer-dist

      - name: Generate and load fixtures
        run: |
          php bin/console m:f:l --env=test --no-interaction

      - name: Backup database
        run: |
          mkdir -p data/backup
          CONTAINER_ID=$(docker ps -qf "name=${{ job.services.mongodb.name }}")
          docker exec "${CONTAINER_ID}" mongodump --uri "${{ env.MONGODB_URL }}" --gzip --archive=/var/backups/mongodb.tar.gz --db=${MONGODB_DB}
          docker cp "${CONTAINER_ID}:/var/backups/mongodb.tar.gz" "${{ github.workspace }}/${{ env.BACKUP_PATH }}/${{ env.BACKUP_FILE_NAME }}"

      - name: Upload backup as artifact
        uses: actions/upload-artifact@v2
        with:
          name: database-backup
          path: ${{ github.workspace }}/${{ env.BACKUP_PATH }}/${{ env.BACKUP_FILE_NAME }}

      - name: Download backup artifact
        uses: actions/download-artifact@v2
        with:
          name: database-backup
          path: ${{ env.BACKUP_PATH }}

      - name: Ls dir
        run: ls -al data/backup

      - name: Run tests
        run: php vendor/bin/phpunit --configuration phpunit.xml.dist
        env:
          APP_ENV: test

#      - name: Set up Docker
#        uses: docker/setup-buildx-action@v1
#
#      - name: Build Docker image
#        run: docker build --cache-from myapp:latest --tag myapp:latest .
#
#      - name: Generate SSL Key for JWT
#        run: php bin/console lexik:jwt:generate-keypair
#
#      - name: Migrate database
#        run: php bin/console d:m:m --no-interaction --env=test
#
#      - name: Loading fixtures
#        run: php bin/console d:f:l --no-interaction --env=test
#      - name: Run PHPStan
#        run: vendor/bin/phpstan analyze
#
#      - name: Run PHPCS
#        run: vendor/bin/phpcs --standard=PSR12 src/
#
#      - name: Generate Code Coverage
#        run: vendor/bin/phpunit --coverage-clover=coverage.xml
#
#      - name: Upload Code Coverage
#        uses: actions/upload-artifact@v2
#        with:
#          name: code-coverage
#          path: coverage.xml
