name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read

env:
  ENV_FILE: .env.test
  APP_ENV: test
  MONGODB_URL: mongodb://localhost:27017/cqrs_test?authSource=admin
  MONGODB_DB: cqrs_test
  BACKUP_PATH: data/backup
  BACKUP_FILE_NAME: mongodb.tar.gz

jobs:
  symfony:
    name: Symfony cqrs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.2]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.serverStatus()'" --health-interval 10s --health-timeout 5s --health-retries 3
        env:
          MONGODB_IP: ${{ job.services.mongodb.ports[27017] }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mongodb

      - name: Copy .env.test
        run: cp ${{ env.ENV_FILE }} .env

      - name: Debug Environment Variables
        run: printenv

      - name: Cache Composer packages
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress --no-interaction --prefer-dist

      - name: Generate and load fixtures
        run: |
          php bin/console m:f:l --env=test --no-interaction

      - name: Connect to MongoDB network
        run: docker network connect github_network_${{ github.run_id }}

      - name: Backup database
        run: |
          mkdir -p ${{ env.BACKUP_PATH }}
          docker exec $(docker ps -qf "name=mongodb") mongodump --host $MONGODB_IP --uri "${{ env.MONGODB_URL }}" --archive=${{ env.BACKUP_PATH }}/${{ env.BACKUP_FILE_NAME }} --gzip

      - name: Upload backup as artifact
        uses: actions/upload-artifact@v2
        with:
          name: database-backup
          path: ${{ github.workspace }}/${{ env.BACKUP_PATH }}/${{ env.BACKUP_FILE_NAME }}

      - name: Download backup artifact
        uses: actions/download-artifact@v2
        with:
          name: database-backup
          path: ${{ env.BACKUP_PATH }}

      - name: Run tests
        run: php vendor/bin/phpunit --configuration phpunit.xml.dist
